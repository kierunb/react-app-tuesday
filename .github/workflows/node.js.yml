# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16]

    steps:
    - uses: actions/checkout@v3
    - run: ls .
    - name: Accessing reepository secret
      run: echo secret - ${{ secrets.GENERICREPOSECRET }}
    
    - name: Cache node modules
      id: cache-npm
      uses: actions/cache@v3
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
      name: List the state of node modules
      continue-on-error: true
      run: npm list
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test
    - name: Upload application artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{format('artifacts{0}', matrix.node-version)}}
        path: build
  
  deploy-to-test:
    runs-on: ubuntu-latest
    needs: build
    environment: test
    concurrency: test
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{format('artifacts{0}', '16')}}
      - run: ls .
      - run: echo test secret - ${{ secrets.ConnectionString }}
      - run: echo Deploying to TEST enviroment.
      
  deploy-to-prod:
    runs-on: ubuntu-latest
    needs: deploy-to-test
    environment: prod
    concurrency: prod
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{format('artifacts{0}', '16')}}
      - run: ls .
      - run: echo prod secret - ${{ secrets.ConnectionString }}
      - run: echo Deploying to PROD enviroment.
